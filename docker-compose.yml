# Inspired by https://docs.docker.com/compose/django/
version: '3.4'

services:
  db:
    image: postgis/postgis:17-3.5
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - ./docker/postgres.entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro
      - db:/var/lib/postgresql/data
    command: postgres -c max_connections=300 -c log_min_messages=LOG
    networks:
      - open-notificaties-dev

  rabbitmq:
    image: rabbitmq:4.0-alpine
    networks:
      - open-notificaties-dev

  redis:
    image: redis
    networks:
      - open-notificaties-dev

  web:
    build: .
    environment: &app-env
      DJANGO_SETTINGS_MODULE: nrc.conf.docker
      SECRET_KEY: ${SECRET_KEY:-\(,gc7VE(#CO<zCR3e(lRtOsw5q+U2DpG5o\X#P4PVRm*=u|E%}
      IS_HTTPS: no
      ALLOWED_HOSTS: '*'
      CACHE_DEFAULT: redis:6379/0
      CACHE_AXES: redis:6379/1
      RABBITMQ_HOST: rabbitmq
      PUBLISH_BROKER_URL: amqp://guest:guest@rabbitmq:5672/%2F
      CELERY_BROKER_URL: amqp://guest:guest@rabbitmq:5672//
      CELERY_RESULT_EXPIRES: 3600
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      CELERY_LOGLEVEL: DEBUG
      CELERY_WORKER_CONCURRENCY: ${CELERY_WORKER_CONCURRENCY:-4}
      SUBPATH: ${SUBPATH:-/}
      OPENNOTIFICATIES_SUPERUSER_USERNAME: admin
      OPENNOTIFICATIES_SUPERUSER_EMAIL: admin@localhost
      DJANGO_SUPERUSER_PASSWORD: admin
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      DISABLE_2FA: ${DISABLE_2FA:-yes}
      LOG_NOTIFICATIONS_IN_DB: ${LOG_NOTIFICATIONS_IN_DB:-yes}
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; exit(requests.head('http://localhost:8000/admin/').status_code not in [200, 302])"]
      interval: 30s
      timeout: 5s
      retries: 3
      # This should allow for enough time for migrations to run before the max
      # retries have passed. This healthcheck in turn allows other containers
      # to wait for the database migrations.
      start_period: 30s
    ports:
      - 8000:8000
    volumes: &app-volumes
      - media:/app/media  # Shared media volume to get access to saved OAS files
      - ./docker/setup_configuration:/app/setup_configuration
    depends_on:
      web-init:
        condition: service_completed_successfully
    networks:
      - open-notificaties-dev

  web-init:
    build: .
    environment:
      <<: *app-env
      #
      # Django-setup-configuration
      RUN_SETUP_CONFIG: ${RUN_SETUP_CONFIG:-true}
    command: /setup_configuration.sh
    depends_on:
      - db
      - rabbitmq
      - redis
    volumes: *app-volumes
    networks:
      - open-notificaties-dev

  celery:
    build: .
    environment: *app-env
    command: /celery_worker.sh
    healthcheck:
      test: ["CMD", "python", "/app/bin/check_celery_worker_liveness.py"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    volumes: *app-volumes
    depends_on:
      web:
        condition: service_healthy
    networks:
      - open-notificaties-dev

  celery-beat:
    build: .
    image: openzaak/open-notificaties:${TAG:-latest}
    environment: *app-env
    command: /celery_beat.sh
    volumes: *app-volumes
    depends_on:
      - db
      - rabbitmq
      - redis
    networks:
      - open-notificaties-dev

  celery-flower:
    build: .
    environment: *app-env
    command: /celery_flower.sh
    ports:
      - 5555:5555
    depends_on:
      - rabbitmq
    networks:
      - open-notificaties-dev

  nginx:
    image: nginx
    volumes:
      - ./docker-nginx-default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "9000:80"
    depends_on:
      - web
    networks:
      - open-notificaties-dev

  openzaak:
    image: openzaak/open-zaak:latest
    environment: &app-env
      - DJANGO_SETTINGS_MODULE=openzaak.conf.docker
      - SECRET_KEY=${SECRET_KEY:-7(h1r2hk)8z9+05edulo_3qzymwbo&c24=)qz7+_@3&2sp=u%i}
      - DB_NAME=openzaak
      - DB_USER=openzaak
      - IS_HTTPS=no
      - ALLOWED_HOSTS=localhost,127.0.0.1,web,web.local,openzaak
      - CORS_ALLOW_ALL_ORIGINS=True
      - CSRF_TRUSTED_ORIGINS=http://localhost:9000
      - CACHE_DEFAULT=redis:6379/0
      - CACHE_AXES=redis:6379/0
      - SUBPATH=${SUBPATH:-/}
      - IMPORT_DOCUMENTEN_BASE_DIR=${IMPORT_DOCUMENTEN_BASE_DIR:-/app/import-data}
      - IMPORT_DOCUMENTEN_BATCH_SIZE=${IMPORT_DOCUMENTEN_BATCH_SIZE:-500}
      - OPENZAAK_SUPERUSER_USERNAME=admin
      - DJANGO_SUPERUSER_PASSWORD=admin
      - OPENZAAK_SUPERUSER_EMAIL=admin@localhost
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - CELERY_LOGLEVEL=DEBUG
      - CELERY_WORKER_CONCURRENCY=${CELERY_WORKER_CONCURRENCY:-4}
      - ENVIRONMENT=dev
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DISABLE_2FA=${DISABLE_2FA:-yes}
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; exit(requests.head('http://localhost:8000/admin/').status_code not in [200, 302])"]
      interval: 30s
      timeout: 5s
      retries: 3
      # This should allow for enough time for migrations to run before the max
      # retries have passed. This healthcheck in turn allows other containers
      # to wait for the database migrations.
      start_period: 30s
    depends_on:
      - db
    ports:
      - 8001:8000
    networks:
      - open-notificaties-dev

  openzaak_celery:
    image: openzaak/open-zaak:latest
    environment: *app-env
    command: /celery_worker.sh
    healthcheck:
      test: ["CMD", "python", "/app/bin/check_celery_worker_liveness.py"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    volumes: *app-volumes
    depends_on:
      openzaak:
        condition: service_healthy
    networks:
      - open-notificaties-dev

volumes:
  media:
  db:

networks:
  open-notificaties-dev:
    name: open-notificaties-dev
